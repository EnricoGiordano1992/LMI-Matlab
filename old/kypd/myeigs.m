function  varargout = myeigs(A, k)
%  MYEIGS Stripped [V,D]=EIGS(A, K, SIGMA, OPTS)  
%  [V, D] = MYEIGS(A, K) a stripped copy of Matlab EIGS.
%  A matrix to find eigenvalues for
%  K number of eigenvalues to find
%  V the eigenvectors
%  D the eigenvalues
%  
%  The the following EIGS options are hard coded (without being checked):
%  SIGMA = 'LM'
%  
%  OPTS.issym = 1
%  OPTS.isreal = 1
%  OPTS.tol = eps
%  OPTS.maxit = 300
%  OPTS.p = 2K
%  OPTS.v0 = randomly generated by ARPACK
%  OPTS.disp = 0
%  OPTS.cholB = 0
%  OPTS.permB = 1:N
%  
% 
%  
%  WARNING THIS IS A MODIFIED VERSION OF MATLAB EIGS!!! EVERYTHING NOT
%  NEEDED FOR THE PROJECT HAVE BEEN SLIMED AWAY.
  
  n = size(A, 1);

  info = int32(0); % use a random starting vector

  p = min(max(2*k,20),n);
  maxit = max(300,ceil(2*n/max(p,1)));
  resid = zeros(n,1);

  if (k>=n)                             % Catch some special case!
    A = full(A);
    [V,D] = eig(A);
    d = diag(D);
    [dum,ind] = sort(abs(d));
    varargout{1} = V(:,ind(end:-1:end-k+1));
    varargout{2} = D(ind(end:-1:end-k+1),ind(end:-1:end-k+1));
    return;
  end
  
  
  % Allocate outputs and ARPACK work variables
  v = zeros(n,p);
  ldv = int32(size(v,1));
  ipntr = int32(zeros(15,1));
  workd = zeros(n,3);
  lworkl = p*(p+8);
  workl = zeros(lworkl,1);
  lworkl = int32(lworkl);
  d = zeros(k,1);

  ido = int32(0); % reverse communication parameter
  nev = int32(k); % number of eigenvalues requested
  ncv = int32(p); % number of Lanczos vectors
  iparam = int32(zeros(11,1));
  iparam([1 3 7]) = int32([1 maxit 1]);
  select = int32(zeros(p,1));

  while (ido ~= 99)
    arpackc('dsaupd', ido, ...
            'I', int32(n), 'LM', nev, eps, resid, ncv, ...
            v, ldv, iparam, ipntr, workd, workl, lworkl, info);

    if (info < 0)
      es = sprintf('Error with ARPACK routine %saupd: info = %d',...
                   'ds',full(double(info)));
      error('MATLAB:eigs:ARPACKroutineError', es)
    end
    
    % Compute which columns of workd ipntr references
    col1 = floor((ipntr(1)-1)/n)+1;
    col2 = floor((ipntr(2)-1)/n)+1;
    switch (ido)
     case {-1,1}
      % OP = A*x
      workd(:,col2) = A * workd(:,col1);
     case 99
     otherwise
      error('MATLAB:eigs:UnknownReverseCommParamFromPrefix',...
            ['Unknown value of reverse communication parameter' ...
             ' returned from ' prefix 'aupd.'])      
    end
  end % while (ido ~= 99)

  if (info < 0)
    es = sprintf('Error with ARPACK routine %saupd: info = %d',prefix,full(info));
    error('MATLAB:eigs:ARPACKroutineError', es)
  else
    rvec = int32(1); % compute eigenvectors
    
    arpackc('dseupd', rvec, 'A', select, ...
            d, v, ldv, 0, ...
            'I', int32(n), 'LM', nev, eps, resid, ncv, ...
            v, ldv, iparam, ipntr, workd, workl, lworkl, info );
    if (rvec == 1)
      v(:,1:k) = v(:,k:-1:1);
    end
    
    if (info ~= 0)
      es = ['Error with ARPACK routine ' prefix 'eupd: '];
      switch double(info)
       case 2
        ss = sum(select);
        if (ss < k)
          es = [es ...
                '  The logical variable select was only set with ' int2str(ss) ...
                ' 1''s instead of nconv=' int2str(double(iparam(5))) ...
                ' (k=' int2str(k) ').' ...
                ' Please contact the ARPACK authors at arpack@caam.rice.edu.'];
        else
          es = [es ...
                'The LAPACK reordering routine ' prefix(1) ...
                'trsen did not return all ' int2str(k) ' eigenvalues.'];
        end
       case 1
        es = [es ...
              'The Schur form could not be reordered by the LAPACK routine ' ...
              prefix(1) 'trsen.' ...
              ' Please contact the ARPACK authors at arpack@caam.rice.edu.'];
       case -14
        es = [es prefix ...
              'aupd did not find any eigenvalues to sufficient accuracy.'];
       otherwise
        es = [es sprintf('info = %d',full(info))];
      end
      error('MATLAB:eigs:ARPACKroutineError', es)
    else
      nconv = double(iparam(5));
      if (nconv == 0)
        if (nargout < 3)
          warning('MATLAB:eigs:NoEigsConverged', ...
                  'None of the %d requested eigenvalues converged.',k)
        end
      elseif (nconv < k)
        warning('MATLAB:eigs:NotAllEigsConverged', ...
                'Only %d of the %d requested eigenvalues converged.',nconv,k)
      end
    end % if (info ~= 0)
  end % if (info < 0)
  
  varargout{1} = v(:,1:k);
  varargout{2} = diag(d(end:-1:end-k+1,1));